---

- name: "User | Debian | Add | {{ name }} | Adding primary group"
  ansible.builtin.include_tasks: group_add.yml
  vars:
    group_name: "{{ user.group | default(name) }}"
  no_log: true
  when: user.group|default(name) not in SYS_AUTH.groups

- name: "User | Debian | Add | {{ name }}"
  ansible.builtin.user:
    name: "{{ name }}"
    group: "{{ user.group | default(name) }}"
    comment: "{% if user.comment is defined %}{{ user.comment_prefix }}{% endif %}{{ user.comment }}"
    shell: "{{ user.shell }}"
    password: "{{ user.password | default(password_disabled) | password_hash('sha512') }}"
    update_password: "{% if user.always_update_password %}always{% else %}on_create{% endif %}"
    groups: "{{ user.groups }}"
    append: "{{ user.append_groups }}"
  register: user_account
  no_log: true
  when: >
    user.dont_touch is undefined or
    not user.dont_touch

- name: "User | Debian | Add | {{ name }} | Setting password"
  ansible.builtin.user:
    name: "{{ name }}"
    password: "{{ user.password | default(password_disabled) | password_hash('sha512') }}"
    update_password: "{% if user.always_update_password %}always{% else %}on_create{% endif %}"
  register: user_account_pwd
  no_log: true
  when:
    - user.dont_touch is defined
    - user.dont_touch
    - user.password is defined

- name: "User | Debian | Add | {{ name }} | Pulling user info"
  ansible.builtin.getent:
    database: 'passwd'
    key: "{{ name }}"
    split: ":"
  when:
    - user.dont_touch is defined
    - user.dont_touch

- name: "User | Debian | Add | {{ name }} | Force password change"
  ansible.builtin.user:
    name: "{{ name }}"
    expires: -1
  when: >
    (user.force_password_change is defined and user.force_password_change) or
    (user_account.changed and user.password_change or
    user_account_pwd.changed and user.password_change)

- name: "User | Debian | Add | {{ name }} | Adding to groups"
  ansible.builtin.include_tasks: user_membership.yml
  vars:
    group: "{{ defaults_group | combine(group_item.value, recursive=true) }}"
    group_name: "{{ group_item.key }}"
  loop_control:
    loop_var: group_item
  with_dict: "{{ SYS_AUTH.groups }}"
  no_log: true
  when:
    - name in group.members
    - group.state == 'present'

- name: "User | Debian | Add | {{ name }} | Setting ssh authorized-keys"
  ansible.posix.authorized_key:
    user: "{{ name }}"
    state: present
    key: '{{ item }}'
    manage_dir: true
  no_log: true
  loop: "{{ user.ssh_pub|default([])|ensure_list }}"
  when: >
    user.sshpub_path is undefined or
    user.sshpub_path in ['', none, ' ']

- name: "User | Debian | Add | {{ name }} | Setting ssh authorized-keys in custom path"
  ansible.posix.authorized_key:
    user: "{{ name }}"
    state: present
    key: '{{ item }}'
    manage_dir: false
    path: "{{ user.sshpub_path | replace(SYS_AUTH_HC.sshpub_user_var, name) }}"
  no_log: true
  loop: "{{ user.ssh_pub|default([])|ensure_list }}"
  when:
    - user.sshpub_path is defined
    - "user.sshpub_path not in ['', none, ' ']"

- name: "User | Debian | Add | {{ name }} | Adding user privileges"
  ansible.builtin.template:
    src: 'templates/etc/sudoers.d/user.j2'
    dest: "/etc/sudoers.d/{{ user.sudoers_file_prefix }}_{{ name | safe_key }}"
    validate: '/usr/sbin/visudo -cf %s'
    mode: 0640
    owner: 'root'
    group: 'root'
  when:
    - user.privileges is defined
    - user.privileges|length > 0

- name: "User | Debian | Add | {{ name }} | Checking that privileges are not set"
  ansible.builtin.file:
    path: "/etc/sudoers.d/{{ user.sudoers_file_prefix }}_{{ name | safe_key }}"
    state: absent
  when: >
    user.privileges is undefined or
    user.privileges|length == 0

- name: "User | Debian | Add | {{ name }} | Setting bash aliases"
  ansible.builtin.blockinfile:
    path: "{{ user_account.home | default(getent_passwd[name][4]) }}/.bashrc"
    block: |
      {% for alias, command in user.bash_aliases.items() %}
        alias {{ alias }}='{{ command }}'
      {% endfor %}
    marker: "# {mark} ANSIBLE MANAGED BLOCK - custom aliases"
  ignore_errors: true
  when:
    - user.bash_aliases is defined
    - user.bash_aliases | length > 0
